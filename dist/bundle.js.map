{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAO;AACP;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mCAAmC;AAChE;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS,SAAS,uBAAuB,iDAAiD,aAAa;AACnI,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;AC9EO;AACP,sDAAsD;AACtD;AACA;AACA;AACA,wDAAwD,UAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,OAAO,KAAK,QAAQ;AAC3E,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD,iBAAiB;AAClE,6EAA6E,WAAW;AACxF;AACA,2EAA2E,0BAA0B;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,mBAAmB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnGO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA,kBAAkB,cAAc,EAAE,aAAa;AAC/C;AACA;;;;;;;UCbA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACN8C;AACE;AACY;AAC5D;AACA;AACA;AACA,iCAAiC,uDAAY;AAC7C;AACA;AACA,+CAA+C,iBAAiB;AAChE;AACA;AACA,qDAAqD;AACrD;AACA,iEAAiE,gBAAgB;AACjF;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC,YAAY,sEAAqB;AACjC;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://ghazal-shells-shop/./script_folder/components/cart.ts","webpack://ghazal-shells-shop/./script_folder/components/gallery.ts","webpack://ghazal-shells-shop/./script_folder/pathResolver.ts","webpack://ghazal-shells-shop/webpack/bootstrap","webpack://ghazal-shells-shop/webpack/runtime/define property getters","webpack://ghazal-shells-shop/webpack/runtime/hasOwnProperty shorthand","webpack://ghazal-shells-shop/webpack/runtime/make namespace object","webpack://ghazal-shells-shop/./script_folder/index.ts"],"sourcesContent":["export class EnhancedCart {\n    constructor(cartIconId, cartModalId) {\n        this.cart = [];\n        this.cartCountElement = document.querySelector(`#${cartIconId}`);\n        this.cartModalElement = document.getElementById(cartModalId);\n        this.cartItemsElement = this.cartModalElement.querySelector(\"#modal-cart-items\");\n        this.cartTotalElement = this.cartModalElement.querySelector(\"#cart-total\");\n        this.loadCartFromStorage();\n        this.updateCartDisplay();\n        this.setupEventListeners();\n    }\n    setupEventListeners() {\n        const clearCartButton = this.cartModalElement.querySelector(\"#clear-cart\");\n        clearCartButton.addEventListener(\"click\", () => this.clearCart());\n    }\n    addToCart(id, src, name, price) {\n        const existingItem = this.cart.find((item) => item.id === id);\n        if (!existingItem) {\n            this.cart.push({ id, src, price, name, quantity: 1 });\n            this.saveCartToStorage();\n            this.updateCartDisplay();\n        }\n        else {\n            alert(`${name || \"Item\"} is already in the cart!`);\n        }\n    }\n    removeFromCart(id) {\n        this.cart = this.cart.filter((item) => item.id !== id);\n        this.saveCartToStorage();\n        this.updateCartDisplay();\n    }\n    clearCart() {\n        this.cart = [];\n        this.saveCartToStorage();\n        this.updateCartDisplay();\n    }\n    saveCartToStorage() {\n        localStorage.setItem(\"cart\", JSON.stringify(this.cart));\n    }\n    loadCartFromStorage() {\n        const savedCart = localStorage.getItem(\"cart\");\n        if (savedCart) {\n            this.cart = JSON.parse(savedCart);\n        }\n    }\n    updateCartDisplay() {\n        this.cartItemsElement.innerHTML = \"\";\n        const viewCartLink = this.cartModalElement.querySelector(\".view-cart-link\");\n        if (!viewCartLink) {\n            console.error(\"View Cart link not found.\");\n            return;\n        }\n        if (this.cart.length === 0) {\n            this.cartItemsElement.innerHTML = \"<li class='list-group-item'>Your cart is empty.</li>\";\n            this.cartCountElement.textContent = \"0\";\n            this.cartTotalElement.textContent = \"0.00\";\n            viewCartLink.style.display = \"none\";\n            return;\n        }\n        viewCartLink.style.display = \"inline\"; // Show link\n        const totalItems = this.cart.reduce((sum, item) => sum + item.quantity, 0);\n        const totalPrice = this.cart.reduce((sum, item) => sum + (item.price || 0) * item.quantity, 0);\n        this.cartCountElement.textContent = totalItems.toString();\n        this.cartTotalElement.textContent = totalPrice.toFixed(2);\n        this.cart.forEach((item) => {\n            const listItem = document.createElement(\"li\");\n            listItem.className = \"list-group-item d-flex justify-content-between align-items-center\";\n            listItem.innerHTML = `\n            <div class=\"d-flex align-items-center\">\n                <img src=\"${item.src}\" alt=\"${item.name || \"Product\"}\" class=\"img-thumbnail me-3\" style=\"width: 50px; height: 50px;\">\n                <span>${item.name || \"Unnamed Product\"}</span>\n            </div>\n            <button class=\"btn btn-danger btn-sm remove-btn\">Remove</button>\n        `;\n            listItem.querySelector(\".remove-btn\").addEventListener(\"click\", () => this.removeFromCart(item.id));\n            this.cartItemsElement.appendChild(listItem);\n        });\n    }\n}\n","export class InfiniteScrollGallery {\n    constructor(galleryId, cart, pictures, config = {}) {\n        this.isLoading = false;\n        const galleryElement = document.getElementById(galleryId);\n        if (!galleryElement) {\n            throw new Error(`Gallery element with ID \"${galleryId}\" not found.`);\n        }\n        this.gallery = galleryElement;\n        this.pictures = pictures;\n        this.loadedPictures = 0;\n        this.batchSize = config.batchSize || 10;\n        this.gridClasses = config.gridClasses || \"col-12 col-sm-6 col-md-4 col-lg-3\";\n        this.observerOptions = config.observerOptions || { root: null, threshold: 0.1 };\n        this.fallbackImage = config.fallbackImage;\n        this.cart = cart;\n        this.initialize();\n    }\n    initialize() {\n        this.loadPictures();\n        this.setupObserver();\n    }\n    loadPictures(count = this.batchSize) {\n        if (this.isLoading)\n            return;\n        this.isLoading = true;\n        setTimeout(() => {\n            const start = this.loadedPictures;\n            const end = Math.min(this.loadedPictures + count, this.pictures.length);\n            console.log(`Loading pictures from index ${start} to ${end - 1}`);\n            for (let i = start; i < end; i++) {\n                const picture = this.pictures[i];\n                const col = this.createColumn(picture);\n                this.gallery.appendChild(col);\n            }\n            this.loadedPictures = end;\n            this.isLoading = false;\n            const sentinel = this.gallery.querySelector(\".sentinel\");\n            if (sentinel) {\n                this.gallery.appendChild(sentinel);\n            }\n            if (this.loadedPictures === this.pictures.length && this.observer) {\n                console.log(\"All pictures loaded. Disconnecting observer.\");\n                this.observer.disconnect();\n            }\n        }, 500);\n    }\n    createColumn(picture) {\n        const col = this.createElement(\"div\", `${this.gridClasses}`);\n        const img = this.createImage(picture.src, picture.name || `Picture ${picture.id}`);\n        const nameLabel = this.createElement(\"p\", \"text-center mt-2\", picture.name);\n        const priceLabel = this.createElement(\"p\", \"text-center mt-1\", `$${picture.price?.toFixed(2)}`);\n        const addToCartButton = this.createButton(\"Add to Cart\", \"btn btn-primary btn-sm add-to-cart-button\", () => this.cart.addToCart(picture.id, picture.src, picture.name, picture.price), picture.stock === 0);\n        col.append(img, nameLabel, priceLabel, addToCartButton);\n        return col;\n    }\n    createImage(src, alt) {\n        const img = document.createElement(\"img\");\n        img.src = src;\n        img.alt = alt;\n        img.className = \"img-fluid gallery-img\";\n        img.loading = \"lazy\";\n        img.onerror = () => {\n            if (this.fallbackImage) {\n                console.log(`Image failed to load. Using fallback: ${this.fallbackImage}`);\n                img.src = this.fallbackImage;\n            }\n        };\n        return img;\n    }\n    setupObserver() {\n        const sentinel = this.createElement(\"div\", \"sentinel\");\n        this.gallery.appendChild(sentinel);\n        this.observer = new IntersectionObserver((entries) => {\n            const lastEntry = entries[0];\n            if (lastEntry.isIntersecting) {\n                console.log(\"Sentinel is visible. Loading more pictures...\");\n                this.loadPictures();\n            }\n            else {\n                console.log(\"Sentinel is not visible.\");\n            }\n        }, this.observerOptions);\n        if (this.observer) {\n            this.observer.observe(sentinel);\n            console.log(\"Observer initialized and watching sentinel.\");\n        }\n    }\n    createElement(tag, className = \"\", textContent = \"\") {\n        const element = document.createElement(tag);\n        element.className = className;\n        element.textContent = textContent;\n        return element;\n    }\n    createButton(text, className, onClick, disabled = false) {\n        const button = this.createElement(\"button\", className, text);\n        button.onclick = onClick;\n        button.disabled = disabled;\n        return button;\n    }\n}\n","export class PathResolver {\n    constructor(basePath) {\n        this.basePath = basePath || window.location.origin;\n        if (!this.basePath.endsWith(\"/\")) {\n            this.basePath += \"/\";\n        }\n    }\n    getFullPath(relativePath) {\n        if (relativePath.startsWith(\"/\")) {\n            relativePath = relativePath.slice(1); // Remove leading slash\n        }\n        return `${this.basePath}${relativePath}`;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { PathResolver } from \"./pathResolver\";\nimport { EnhancedCart } from \"@components/cart\";\nimport { InfiniteScrollGallery } from \"@components/gallery\";\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\n    try {\n        // Initialize PathResolver dynamically\n        const pathResolver = new PathResolver();\n        // Fetch all products from the API\n        const productsEndpoint = pathResolver.getFullPath(\"api/products\");\n        console.log(`Fetching products from: ${productsEndpoint}`);\n        const response = await fetch(productsEndpoint);\n        if (!response.ok) {\n            const errorText = await response.text(); // Read the error message\n            console.error(\"Failed to fetch products. Server responded with:\", errorText);\n            throw new Error(`Failed to fetch products. Status: ${response.status}`);\n        }\n        let products;\n        try {\n            products = await response.json(); // Parse JSON\n        }\n        catch (error) {\n            console.error(\"Error parsing JSON:\", error);\n            throw new Error(`Invalid JSON response from ${productsEndpoint}`);\n        }\n        // Map products to pictures for the gallery\n        const pictures = products.map((product) => ({\n            id: product.id,\n            src: product.image_url.startsWith(\"/\")\n                ? pathResolver.getFullPath(product.image_url.slice(1))\n                : pathResolver.getFullPath(product.image_url),\n            name: product.name,\n            price: product.price,\n            stock: product.stock,\n        }));\n        // Configure the gallery\n        const galleryConfig = {\n            batchSize: 10,\n            gridClasses: \"col-12 col-sm-6 col-md-4 col-lg-3\",\n            fallbackImage: pathResolver.getFullPath(\"/fallback.jpg\"),\n        };\n        // Initialize cart and gallery\n        const cart = new EnhancedCart(\"cart-icon\", \"cartModal\");\n        new InfiniteScrollGallery(\"gallery\", cart, pictures, galleryConfig);\n    }\n    catch (error) {\n        console.error(\"Error loading gallery:\", error);\n    }\n});\n"],"names":[],"sourceRoot":""}